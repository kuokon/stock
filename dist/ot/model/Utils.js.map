{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../../src/ot/model/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nmodule MyApp {\r\n\r\n    export interface NV {\r\n        name: string,\r\n        value: string,\r\n    }\r\n\r\n\r\n    export class ParseResult {\r\n\r\n        skipped: string[] = [];\r\n        failed: string[] = [];\r\n        duplicates: any [] = [];\r\n        msg: string = null;\r\n        parsed: any[] = [];\r\n\r\n        public clear() {\r\n            this.parsed = [];\r\n            this.failed = [];\r\n            this.skipped = [];\r\n        }\r\n\r\n        public copyDups(): void {\r\n            this.parsed.push.apply(this.parsed, this.duplicates);\r\n        }\r\n    }\r\n\r\n    export class ImportUtil {\r\n\r\n        public static onParseTemplate(svr: DbService, txt: string): ParseResult {\r\n\r\n            return Option.parseRaw(svr, txt);\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //\r\n    // export class Log extends Base {\r\n    //\r\n    //     Log: string;\r\n    //\r\n    //     UpdateBy: number;\r\n    //     UpdateAt : Date = Helper.getLocalTime();\r\n    //\r\n    //\r\n    //     static fromJson( json): Log {\r\n    //\r\n    //         let res = new Log();\r\n    //\r\n    //         res.Id = json.Id;\r\n    //         res.Name = json.log;\r\n    //         res.Log = json.log;\r\n    //         res.UpdateAt = new Date(json.UpdateAt);\r\n    //         res.UpdateBy = json.UpdateBy;\r\n    //\r\n    //         return res;\r\n    //     }\r\n    //\r\n    //     match(filter:string) : boolean {\r\n    //         let str =  this.UpdateBy + this.Log;\r\n    //\r\n    //         return str.indexOf(filter) >=0;\r\n    //     }\r\n    // }\r\n\r\n\r\n    export class Infolet extends Base {\r\n\r\n        static TYPE_NA = 0;\r\n        static TYPE_TIME = 1;\r\n        static TYPE_VR = 2;\r\n        static TYPE_GPS = 3;\r\n\r\n        static TYPE_TASK_STATS = 5;\r\n\r\n\r\n        public Type: number = 0;\r\n        public Status: number = 0;\r\n\r\n\r\n        public Remark: string;\r\n        public Data: string;\r\n\r\n        public LinkId: number;\r\n\r\n        public UpdateBy: number;\r\n        //public UpdateAt: Date = new Date();\r\n        //public UpdateAt  = moment();\r\n        public UpdateAt = Helper.getLocalTime();\r\n\r\n\r\n        // linkId => taskId\r\n        public static makeTaskCount(linkId: number, by: number = 0, numTotal:number, numDone:number ): Infolet {\r\n\r\n            let r = new Infolet();\r\n            r.Type = Infolet.TYPE_TASK_STATS;\r\n            r.LinkId = linkId;\r\n            r.UpdateBy = by;\r\n\r\n            let data = { NumTotal : numTotal, NumDone : numDone};\r\n            r.Data = JSON.stringify(data);\r\n\r\n            return r;\r\n        }\r\n\r\n        public static makeTime(linkId: number, by: number = 0): Infolet {\r\n\r\n            let r = new Infolet();\r\n            r.Type = Infolet.TYPE_TIME;\r\n            r.LinkId = linkId;\r\n            r.UpdateBy = by;\r\n\r\n            return r;\r\n        }\r\n\r\n        public static makeVR(linkId: number, by: number = 0): Infolet {\r\n\r\n            let r = new Infolet();\r\n            r.Type = Infolet.TYPE_VR;\r\n\r\n            r.LinkId = linkId;\r\n\r\n            return r;\r\n        }\r\n\r\n        static fromJson(json): Infolet {\r\n\r\n            let res = new Infolet();\r\n\r\n            res.Id = json.Id;\r\n            res.LinkId = json.LinkId;\r\n            res.Type = json.Type;\r\n            res.Remark = json.Remark;\r\n            res.Data = json.Data;\r\n            res.Status = json.Status;\r\n            res.UpdateAt = json.UpdateAt;\r\n            res.UpdateBy = json.UpdateBy;\r\n\r\n            return res;\r\n        }\r\n\r\n        toJson(): string {\r\n            return JSON.stringify(this, Helper.json_replacer);\r\n        }\r\n\r\n        public makeTmpDbKey(): string {\r\n            return MyApp.Config.APP_ID + '-infolet-' + this.Id\r\n        }\r\n\r\n    }\r\n\r\n    export class InfoletMgr {\r\n\r\n        public static TAG: string = 'InfoletMgr';\r\n        public TAG = InfoletMgr.TAG;\r\n        private _svr: DbService = null;\r\n        private storage = window.localStorage;\r\n        private _infolet_all: Infolet[] = null;\r\n\r\n        private _maxId = 100;\r\n\r\n        constructor(svr: DbService) {\r\n            this._svr = svr;\r\n        }\r\n\r\n        public listUpdated(): void {\r\n            this._infolet_all = null;\r\n        }\r\n\r\n        public clearAll(): void {\r\n            this._infolet_all = null;\r\n        }\r\n\r\n        public clearById(id: number) {\r\n            let key = this.makeKeyById(id);\r\n\r\n            console.info(this.TAG + ' clearing id key: ' + key);\r\n            this.storage.removeItem(key);\r\n\r\n            this.listUpdated();\r\n        }\r\n\r\n\r\n        public hasPending(): boolean {\r\n            return this.getAll().length > 0;\r\n        }\r\n\r\n        makePrefix(): string {\r\n            return MyApp.Config.APP_ID + '-infolet-';\r\n        }\r\n\r\n        public getAll(): Infolet[] {\r\n\r\n            if (this._infolet_all == null) {\r\n\r\n\r\n                let prefix = this.makePrefix();\r\n\r\n                let keys = Object.keys(this.storage);\r\n                let res: Infolet[] = [];\r\n                let skipped = [];\r\n\r\n                for (const key of keys) {\r\n                    if (key.startsWith(prefix)) {\r\n                        let task = this.getByKey(key);\r\n                        if (task) {\r\n\r\n                            res.push(task);\r\n                            this._maxId = Math.max(task.Id, this._maxId);\r\n\r\n                        }\r\n                    } else {\r\n                        // console.info(this.TAG + ' skipped key: ' + key);\r\n                        skipped.push(key);\r\n\r\n                    }\r\n                }\r\n\r\n                this._infolet_all = res;\r\n                console.info(this.TAG + ' skipped keys: ' + JSON.stringify(skipped));\r\n                console.info(this.TAG + ' found  infolets: ' + this._infolet_all.length + ', maxId: ' + this._maxId);\r\n            }\r\n\r\n            return this._infolet_all;\r\n\r\n        }\r\n\r\n        public add(item: Infolet) {\r\n\r\n            if (item.Id > 0) {\r\n                let msg = 'infolet already in store? id: ' + item.Id;\r\n                console.warn(msg);\r\n                // this._svr.doLogServerMsg(msg);\r\n            }\r\n\r\n            item.Id = this._maxId++;\r\n\r\n            let key = this.makeKey(item);\r\n            this.storage.setItem(key, item.toJson());\r\n            this.listUpdated();\r\n\r\n            console.info(this.TAG + ' saved : ' + item.Id);\r\n        }\r\n\r\n        public getByKey(key: string): Infolet {\r\n            let jsonStr = this.storage.getItem(key);\r\n\r\n            let res: Infolet = null;\r\n            if (jsonStr) {\r\n                let json = JSON.parse(jsonStr);\r\n                res = Infolet.fromJson( json);\r\n\r\n\r\n                console.info(this.TAG + ' load id: ' + res.Id);\r\n\r\n            } else {\r\n                let msg = this.TAG + ' infolet not found on local-storage for key' + key;\r\n                console.info(msg);\r\n\r\n                // this._svr.doLogServerMsg(msg);\r\n            }\r\n\r\n            return res;\r\n\r\n        }\r\n\r\n        public getById(id: number): Infolet {\r\n\r\n            let tag = this.makeKeyById(id);\r\n            return this.getByKey(tag);\r\n        }\r\n\r\n        public makeKeyById(infoletId: number): string {\r\n\r\n            return this.makePrefix() + infoletId\r\n        }\r\n\r\n        public makeKey(t: Infolet): string {\r\n            return this.makeKeyById(t.Id)\r\n        }\r\n\r\n        private removeAll(): void {\r\n\r\n            let items = this.getAll();\r\n            for (const e of items) {\r\n                this.clearById(e.Id);\r\n            }\r\n\r\n            this.listUpdated();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    export class Util {\r\n\r\n\r\n        public static isEmpty(obj): boolean {\r\n            return obj === undefined || obj === null;\r\n        }\r\n\r\n        public static isBlank(obj): boolean {\r\n            return obj === undefined || obj === null || obj.trim() === '';\r\n        }\r\n\r\n\r\n        public static clearAll(obj): void {\r\n\r\n            if (obj === null || obj === undefined) {\r\n                return;\r\n            }\r\n\r\n            if (obj.constructor === Array) {\r\n                while (obj.length > 0) {\r\n                    obj.pop();\r\n                }\r\n            } else {\r\n                for (let prop in obj) {\r\n                    if (obj.hasOwnProperty(prop)) {\r\n                        delete obj[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        static dateTime2date(datetime: string): string {\r\n            if (this.isBlank(datetime)) {\r\n                return datetime;\r\n            }\r\n            return datetime.substr(0, 10);\r\n        }\r\n\r\n        // compare date1, date2,   return -1, 0, 1  as  date1 - date 2\r\n        static compareDate(date1: string, date2: string): number {\r\n            if (Helper.isBlank(date1)) {\r\n                return -1\r\n            }\r\n\r\n            if (Helper.isBlank(date2)) {\r\n                return 1\r\n            }\r\n\r\n            // date format '2018-01-01\r\n            let d1 = this.dateTime2date(date1).replace('-', '').replace('-', '');\r\n            let d2 = this.dateTime2date(date2).replace('-', '').replace('-', '');\r\n\r\n            return parseInt(d1) - parseInt(d2);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    export class Attr {\r\n        name: string;\r\n        type: number;\r\n        type_num: number;\r\n\r\n        public static make(name: string, type: number, num: number): Attr {\r\n            let r = new Attr();\r\n            r.name = name.trim();\r\n            r.type = type;\r\n            r.type_num = num > 0 ? num : 30;\r\n\r\n            return r;\r\n        }\r\n\r\n\r\n        toSql(): string {\r\n\r\n            let str = '';\r\n            switch (this.type) {\r\n                case ModelGen.TYPE_NUM: {\r\n\r\n                    str = 'INT default 0';\r\n                    if (this.name == 'Id') {\r\n                        str = 'INT NOT NULL IDENTITY'\r\n                    }\r\n                    break;\r\n                }\r\n                case ModelGen.TYPE_STR: {\r\n                    str = 'varchar(' + this.type_num + ')';\r\n                    break;\r\n                }\r\n                case ModelGen.TYPE_DATE : {\r\n                    str = 'DATETIME DEFAULT getdate()';\r\n                    break;\r\n                }\r\n                default:\r\n                    str = ' ?? type: ' + this.type\r\n\r\n            }\r\n\r\n            return ', ' + this.name + ' ' + str;\r\n        }\r\n\r\n        toJS(): string {\r\n\r\n            let str = '';\r\n            switch (this.type) {\r\n                case ModelGen.TYPE_NUM: {\r\n                    str = 'number = 0';\r\n                    if (this.name == 'Id') {\r\n                        str = 'number = -1';\r\n                    }\r\n                    break;\r\n                }\r\n                case ModelGen.TYPE_STR: {\r\n                    str = \"string = ''\";\r\n                    break;\r\n                }\r\n                case ModelGen.TYPE_DATE : {\r\n                    str = 'Date';\r\n                    break;\r\n                }\r\n                default:\r\n                    str = ' ?? type: ' + this.type\r\n\r\n            }\r\n\r\n            return 'public ' + this.name + ': ' + str + ';';\r\n        }\r\n\r\n        toCSharp(): string {\r\n\r\n            let str = '';\r\n            switch (this.type) {\r\n                case ModelGen.TYPE_NUM: {\r\n                    str = ' int ';\r\n                    break;\r\n                }\r\n                case ModelGen.TYPE_STR: {\r\n                    str = ' string ';\r\n                    break;\r\n                }\r\n                case ModelGen.TYPE_DATE : {\r\n                    str = ' DateTime ';\r\n                    break;\r\n                }\r\n                default:\r\n                    str = ' ?? type: ' + this.type\r\n\r\n            }\r\n\r\n            return 'public ' + str + ' ' + this.name + ' { get; set; }';\r\n        }\r\n\r\n    }\r\n\r\n    export class ModelGen {\r\n\r\n        public static TYPE_NUM = 1;\r\n        public static TYPE_STR = 2;\r\n        public static TYPE_DATE = 3;\r\n\r\n\r\n        public clazz = 'MyModel';\r\n\r\n        attrs: Attr[] = [];\r\n\r\n        constructor() {\r\n            this.add('Id', 'num', -1);\r\n\r\n            this.add('Status', 'num');\r\n            this.add('Remark', 'str', 50);\r\n            this.add('UpdateBy', 'num');\r\n            this.add('UpdateAt', 'date');\r\n        }\r\n\r\n        public add(name: string, type: string, strLen?: number) {\r\n\r\n            let t = ModelGen.TYPE_NUM;\r\n            type = type || 'int';\r\n\r\n            if (type.indexOf('date') >= 0) {\r\n                t = ModelGen.TYPE_DATE\r\n            } else if (type.indexOf('str') >= 0) {\r\n                t = ModelGen.TYPE_STR;\r\n            }\r\n\r\n            let firstChar = name[0];\r\n            let upper = firstChar.toUpperCase() + name.substr(1);\r\n\r\n            if (upper != name) {\r\n                console.warn(' Model use upper-case for 1st char name: ' + name);\r\n            }\r\n\r\n            this.attrs.push(Attr.make(upper, t, strLen));\r\n        }\r\n\r\n\r\n        toAll(): string {\r\n            let sp = '\\n';\r\n            return \"\"\r\n\r\n                + sp + sp + this.toCSharp()\r\n                + sp + sp + this.toSQL()\r\n                + sp + sp + this.toJS()\r\n        }\r\n\r\n\r\n        toSQL(): string {\r\n\r\n            let res = [];\r\n\r\n            res.push('-- SQL --');\r\n\r\n            // res.push('Id INT NOT NULL IDENTITY');\r\n            for (const attr of this.attrs) {\r\n                res.push(attr.toSql())\r\n            }\r\n\r\n            // res.push(', UpdateBy INT default 0');\r\n            // res.push(', UpdateAt DATETIME DEFAULT getdate()');\r\n\r\n\r\n            return res.join('\\n');\r\n\r\n        }\r\n\r\n        toCSharp(): string {\r\n            let res = [];\r\n\r\n\r\n            res.push('// CSharp --');\r\n            res.push(' [Table(\"' + this.clazz + ' \", Schema = \"ot\")]');\r\n            res.push(' public class ' + this.clazz);\r\n            res.push(' { ');\r\n\r\n            for (const attr of this.attrs) {\r\n                res.push(attr.toCSharp())\r\n            }\r\n            res.push('} \\n } \\n\\n');\r\n\r\n\r\n            res.push(' // CSharp clone ');\r\n            for (const attr of this.attrs) {\r\n\r\n                if (attr.name == 'Id') {\r\n                    continue;\r\n                } else if (attr.name == 'UpdateBy') {\r\n                    res.push('    orig.' + attr.name + ' = byUserId;');\r\n                } else if (attr.name == 'UpdateAt') {\r\n                    res.push('    orig.' + attr.name + ' = DateTime.Now ;');\r\n                } else {\r\n                    res.push('    orig.' + attr.name + ' = update.' + attr.name + ';');\r\n                }\r\n\r\n            }\r\n\r\n            return res.join('\\n');\r\n        }\r\n\r\n        toJS(): string {\r\n            let res = [];\r\n\r\n\r\n            res.push('// js --');\r\n\r\n            for (const attr of this.attrs) {\r\n                res.push(attr.toJS())\r\n            }\r\n\r\n            res.push(' public _dirty:boolean = true;');\r\n\r\n            res.push('');\r\n\r\n            res.push('static fromJson(json) :  ' + this.clazz + ' {');\r\n            res.push('    let e = new ' + this.clazz + '() ; ');\r\n            res.push('    e._dirty = false ;');\r\n            for (const attr of this.attrs) {\r\n                res.push('    e.' + attr.name + ' = json.' + attr.name + '; ');\r\n            }\r\n\r\n            res.push('       return e;  } ');\r\n\r\n\r\n            return res.join('\\n');\r\n        }\r\n\r\n        static from(str: string): ModelGen {\r\n\r\n\r\n            let res = new ModelGen();\r\n\r\n            let name = '';\r\n            let idx = str.indexOf('|');\r\n            let className = 'NA';\r\n\r\n            if (idx > 0) {\r\n                className = str.substr(0, idx).trim();\r\n                str = str.substr(idx + 1);\r\n            }\r\n\r\n            let fields = str.split(';');\r\n            let fieldLine = null;\r\n            try {\r\n                for (fieldLine of fields) {\r\n\r\n                    if (Helper.isBlank(fieldLine)) {\r\n                        continue;\r\n                    }\r\n                    let f = fieldLine.split(':');\r\n                    res.add(f[0], f[1]);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                console.info(' fields: \"' + fieldLine + '\", str: ' + str);\r\n                return;\r\n            }\r\n\r\n            res.clazz = className;\r\n\r\n            return res;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}"]}