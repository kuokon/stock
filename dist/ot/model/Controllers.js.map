{"version":3,"file":"Controllers.js","sourceRoot":"","sources":["../../../src/ot/model/Controllers.ts"],"names":[],"mappings":"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","sourcesContent":["// import * as angular from \"angular\";\r\n\r\n\r\nmodule MyApp {\r\n\r\n\r\n    export class AdminController {\r\n\r\n        static $inject = ['DbService', '$routeParams', '$mdSidenav', '$mdToast', '$mdDialog', '$mdMedia', '$mdBottomSheet'];\r\n        title: string = 'Admin';\r\n        svr: DbService;\r\n\r\n        constructor(private DbService: DbService,\r\n                    $routeParams: any,\r\n                    private $mdSidenav: ng.material.ISidenavService,\r\n                    private $mdToast: ng.material.IToastService,\r\n                    private $mdDialog: ng.material.IDialogService,\r\n                    private $mdMedia: ng.material.IMedia,\r\n                    private $mdBottomSheet: ng.material.IBottomSheetService) {\r\n\r\n            this.svr = DbService;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    export class OptionFilter {\r\n        public txt: string = '';\r\n        public dte: number = 0;\r\n\r\n        public month: number = 0;\r\n\r\n\r\n        public reset(): void {\r\n            this.txt = '';\r\n            this.dte = 0;\r\n            this.month = 0;\r\n        }\r\n    }\r\n\r\n\r\n    export class OptionController {\r\n\r\n        static $inject = ['DbService', '$routeParams', '$mdSidenav', '$mdToast', '$mdDialog', '$mdMedia', '$mdBottomSheet'];\r\n        title: string = 'Option';\r\n        svr: DbService;\r\n\r\n        stats: OptionStats = new OptionStats();\r\n        isShowExpire: boolean = false;\r\n        isShowStocks: boolean = true;\r\n        isShowMonths: boolean = true;\r\n        filter: OptionFilter = new OptionFilter();\r\n\r\n        mock: Option = null;\r\n\r\n\r\n        constructor(private DbService: DbService,\r\n                    $routeParams: any,\r\n                    private $mdSidenav: ng.material.ISidenavService,\r\n                    private $mdToast: ng.material.IToastService,\r\n                    private $mdDialog: ng.material.IDialogService,\r\n                    private $mdMedia: ng.material.IMedia,\r\n                    private $mdBottomSheet: ng.material.IBottomSheetService) {\r\n\r\n            this.svr = DbService;\r\n\r\n\r\n        }\r\n\r\n        onMakeStock(): void {\r\n            let stock = Stock.fromJson(this.svr, '');\r\n\r\n\r\n            this.svr.mgr.stocks.add(stock);\r\n        }\r\n\r\n\r\n        getOptions(filter: OptionFilter): Option[] {\r\n\r\n            let tmp = this.svr.mgr.options.getAll();\r\n\r\n            if (!this.isShowExpire) {\r\n                tmp = tmp.filter(e => {\r\n                    return !e.isExpired()\r\n                })\r\n            }\r\n\r\n            let res: Option[] = [];\r\n\r\n            if (!Helper.isBlank(filter.txt)) {\r\n                for (const re of tmp) {\r\n                    if (re.match(filter.txt)) {\r\n                        res.push(re);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                res = tmp;\r\n            }\r\n\r\n            res = res.filter(e => {\r\n                return e.getStock()._isShow;\r\n            });\r\n\r\n            if (filter.dte > 0 && filter.month > 0) {\r\n                console.warn('both dte and month filter on... dte: ' + filter.dte + ', month: ' + filter.month);\r\n            }\r\n\r\n\r\n            if (filter.dte > 0) {\r\n                res = res.filter(e => {\r\n                    return e._dayToExp <= filter.dte;\r\n                })\r\n            }\r\n\r\n            if (filter.month > 0) {\r\n                res = res.filter(e => {\r\n                    return e.getMonth() == filter.month;\r\n                })\r\n            }\r\n\r\n\r\n            this.stats.calc(res);\r\n\r\n            let stocks = this.svr.mgr.stocks.getAll();\r\n\r\n\r\n            stocks.forEach(e => {\r\n                e._exposure_p = 0;\r\n                e._exposure_c = 0;\r\n                e._cash_in_amt = 0;\r\n                e._cash_lost_amt = 0;\r\n                e._num_call = 0;\r\n                e._num_put = 0;\r\n\r\n            });\r\n\r\n            res.forEach(e => {\r\n\r\n                let ep = e.getExposure();\r\n                let stock = e.getStock();\r\n                if (e.isCall()) {\r\n                    stock._exposure_c += ep;\r\n                    stock._num_call += e.NumContract;\r\n                } else {\r\n                    stock._exposure_p += ep;\r\n                    stock._num_put += e.NumContract;\r\n                }\r\n\r\n                stock._cash_in_amt += e.getCashIn();\r\n                stock._cash_lost_amt += e.getLost();\r\n\r\n            });\r\n\r\n            if (this.mock) {\r\n                res.unshift(this.mock);\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        makeMock(option): void {\r\n            let json = JSON.parse(JSON.stringify(option));\r\n            this.mock = Option.fromJson(this.svr, json);\r\n            this.mock._isMock = true;\r\n            this.mock.DateBought = moment().format('YYYY-MM-DD');\r\n\r\n            this.mock.PriceAtBought = option.getStock().Price;\r\n            this.mock.init();\r\n        }\r\n\r\n        onUpdateMock(stock: Stock, month: number, isCall: boolean): void {\r\n\r\n\r\n            if (!this.mock) {\r\n                this.mock = Option.fromJson(this.svr, {});\r\n            }\r\n            let mock = this.mock;\r\n            mock.P_C = isCall ? 'C' : 'P';\r\n            mock._stock = stock;\r\n            mock.StockTicker = stock.Symbol;\r\n\r\n            let m = moment();\r\n            let currMonth = m.month() + 1;\r\n            let currYear = m.year();\r\n            if (currMonth < month) {\r\n                currYear++;\r\n            }\r\n\r\n            mock.DateExp = moment(currYear + '-' + month + '-' + 29, 'YYYY-MM-DD');\r\n            mock.DateBought = m.format('YYYY-MM-DD');\r\n            mock.init();\r\n\r\n        }\r\n\r\n\r\n        onParse(raw): ParseResult {\r\n\r\n            let isHK = true;\r\n            return Import.parseRaw(this.svr, raw, isHK);\r\n        }\r\n\r\n        getSubheaders(): NV[] {\r\n            return [\r\n                {name: 'main', value: '/'}\r\n                , {name: 'import', value: '/option/'}\r\n            ]\r\n        }\r\n\r\n        onCopyDataToClipboard(options: Option[]): void {\r\n\r\n            //let res :Option[] = pr.parsed;\r\n            let buf = JSON.stringify(options, Helper.json_replacer);\r\n            Helper.copyTxtToClipboard(this.svr, buf);\r\n\r\n\r\n        }\r\n\r\n        refreshStockPrice(): void {\r\n\r\n            let stocks = this.svr.mgr.stocks.getAll();\r\n            stocks.forEach(e => {\r\n                this.getStockPrice(e);\r\n            })\r\n        }\r\n\r\n\r\n        onReset(): void {\r\n\r\n            this.filter.reset();\r\n            this.isShowExpire = false;\r\n            this.isShowMonths = true;\r\n            this.isShowStocks = true;\r\n\r\n            this.svr.mgr.stocks.getAll().forEach(e => {\r\n                e._isShow = true\r\n            })\r\n            // this.mock = null;\r\n        }\r\n\r\n        updateStockPriceHistory(stock: Stock): void {\r\n            console.info('updating price history....');\r\n\r\n            let symbol = stock.Symbol + (stock.isHK() ? '.HK' : '');\r\n            let apikey = '4VDN7RLHYUFKHWXE';\r\n            let url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=' + symbol + '&apikey=4VDN7RLHYUFKHWXE&outputsize=full';\r\n\r\n            let options = this.svr.mgr.options.getAll().filter(e => {\r\n                return e.getStock() == stock\r\n            });\r\n            options = options.filter(e => {\r\n                return !e.PriceAtBought || (e.isExpired() && !e.PriceAtExp)\r\n            });\r\n\r\n\r\n            this.svr.$http.get(url).then(res => {\r\n\r\n\r\n                let price, last;\r\n                let data = res.data['Time Series (Daily)'];\r\n\r\n                for (const option of options) {\r\n                    if (data[option.DateBought]) {\r\n\r\n                        price = data[option.DateBought]['4. close'];\r\n                        option.PriceAtBought = parseFloat(price);\r\n\r\n                        if (option.isExpired()) {\r\n                            price = data[option.DateExp]['4. close'];\r\n                            option.PriceAtExp = parseFloat(price);\r\n                        }\r\n\r\n                        console.info('option price history updated: bought: ' + option.PriceAtBought + ', exp: ' + option.PriceAtExp);\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n        }\r\n\r\n        getStockPrice(stock: Stock): void {\r\n\r\n\r\n            let symbol = stock.Symbol + (stock.isHK() ? '.HK' : '');\r\n            let apikey = '4VDN7RLHYUFKHWXE';\r\n\r\n\r\n            //let url = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo';\r\n            let url = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=' + symbol + '&apikey=' + apikey;\r\n\r\n            let url_date = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=4VDN7RLHYUFKHWXE&date=2020-02-01&outputsize=compact';\r\n\r\n            // console.info(' ')\r\n\r\n            this.svr.$http.get(url).then(res => {\r\n                console.info(' res: ' + JSON.stringify(res));\r\n                console.info(' curr price for ' + symbol + ' ==> ' + res.data);\r\n\r\n                let price, last;\r\n\r\n                try {\r\n\r\n                    price = res.data['Global Quote']['05. price'];\r\n                    last = res.data['Global Quote']['08. previous close'];\r\n                    // change = res.data['Global Quote']['09. change'];\r\n                    // change_pct = res.data['Global Quote']['10. change percent'];\r\n\r\n                    stock.Price = parseFloat(price);\r\n                    stock.PriceLast = parseFloat(last);\r\n\r\n\r\n                    console.info(' price updated ' + stock.Symbol + ' --> ' + stock.Price);\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n\r\n            });\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n"]}